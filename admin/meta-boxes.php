<?php
/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * Message = get_post_meta( get_the_ID(), 'wiz_snb_message', true )
 * Bold message = get_post_meta( get_the_ID(), 'wiz_snb_bold-message', true )
 * Add Button = get_post_meta( get_the_ID(), 'wiz_snb_add-button', true )
 * Button text = get_post_meta( get_the_ID(), 'wiz_snb_button-text', true )
 * Button URL = get_post_meta( get_the_ID(), 'wiz_snb_button-url', true )
 * Button text color = get_post_meta( get_the_ID(), 'wiz_snb_button-text-color', true )
 * Button background color = get_post_meta( get_the_ID(), 'wiz_snb_button-background-color', true )
 * Align button to right = get_post_meta( get_the_ID(), 'wiz_snb_align-button-to-right', true )
 * Font color = get_post_meta( get_the_ID(), 'wiz_snb_font-color', true )
 * Background color = get_post_meta( get_the_ID(), 'wiz_snb_background-color', true )
 * Notification bar position = get_post_meta( get_the_ID(), 'wiz_snb_notification-bar-position', true )
 * Make sticky = get_post_meta( get_the_ID(), 'wiz_snb_make-sticky', true )
 * Dismissable = get_post_meta( get_the_ID(), 'wiz_snb_dismissable', true )
 */
class wiz_snb_message {
	private $config = '{"title":"Notification Bar Settings","description":"Fill in the following settings for displaying the notification bar on your website\r\n","prefix":"wiz_snb_","domain":"wiz_plugins","class_name":"wiz_snb_message","context":"normal","priority":"default","cpt":"notification_bar","fields":[{"type":"text","label":"Message","default":"We have a notice to share","id":"wiz_snb_message"},{"type":"checkbox","label":"Bold message","description":"Make the message text bold","id":"wiz_snb_bold-message"},{"type":"checkbox","label":"Add Button","description":"This must be enabled to display a button on the notification bar","id":"wiz_snb_add-button"},{"type":"text","label":"Button text","default":"Buy Now","id":"wiz_snb_button-text"},{"type":"text","label":"Button URL","default":"\/shop\/","id":"wiz_snb_button-url"},{"type":"color","label":"Button text color","default":"#fafafa","color-picker":"1","id":"wiz_snb_button-text-color"},{"type":"color","label":"Button background color","default":"#1c21ca","color-picker":"1","id":"wiz_snb_button-background-color"},{"type":"checkbox","label":"Align button to right","description":"Check to align button to right. If unchecked button will be inline center","id":"wiz_snb_align-button-to-right"},{"type":"color","label":"Font color","default":"#f5f4f4","color-picker":"1","id":"wiz_snb_font-color"},{"type":"color","label":"Background color","default":"#000000","color-picker":"1","id":"wiz_snb_background-color"},{"type":"select","label":"Notification bar position","default":"top","options":"top: Top\r\nbottom: Bottom","id":"wiz_snb_notification-bar-position"},{"type":"checkbox","label":"Make sticky","description":"Make this bar stick to the top or bottom of a page","id":"wiz_snb_make-sticky"},{"type":"checkbox","label":"Dismissable","description":"Allow the bar to be dismissed","id":"wiz_snb_dismissable"}]}';

	public function __construct() {
		$this->config = json_decode( $this->config, true );
		$this->process_cpts();
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'admin_enqueue_scripts', [ $this, 'admin_enqueue_scripts' ] );
		add_action( 'admin_head', [ $this, 'admin_head' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function process_cpts() {
		if ( !empty( $this->config['cpt'] ) ) {
			if ( empty( $this->config['post-type'] ) ) {
				$this->config['post-type'] = [];
			}
			$parts = explode( ',', $this->config['cpt'] );
			$parts = array_map( 'trim', $parts );
			$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
		}
	}

	public function add_meta_boxes() {
		foreach ( $this->config['post-type'] as $screen ) {
			add_meta_box(
				sanitize_title( $this->config['title'] ),
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function admin_enqueue_scripts() {
		global $typenow;
		if ( in_array( $typenow, $this->config['post-type'] ) ) {
			wp_enqueue_script( 'wp-color-picker' );
			wp_enqueue_style( 'wp-color-picker' );
		}
	}

	public function admin_head() {
		global $typenow;
		if ( in_array( $typenow, $this->config['post-type'] ) ) {
			?><script>
				jQuery.noConflict();
				(function($) {
					$(function() {
						$('.rwp-color-picker').wpColorPicker();
					});
				})(jQuery);
			</script><?php
			?><?php
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				case 'checkbox':
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], isset( $_POST[ $field['id'] ] ) ? $_POST[ $field['id'] ] : '' , $sanitized);
						break;
					}
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		echo '<div class="rwp-description">' . $this->config['description'] . '</div>';
		$this->fields_table();
	}

	private function fields_table() {
		?><table class="form-table" role="presentation">
			<tbody><?php
				foreach ( $this->config['fields'] as $field ) {
					?><tr>
						<th scope="row"><?php $this->label( $field ); ?></th>
						<td><?php $this->field( $field ); ?></td>
					</tr><?php
				}
			?></tbody>
		</table><?php
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			default:
				printf(
					'<label class="" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			case 'checkbox':
				$this->checkbox( $field );
				break;
			case 'select':
				$this->select( $field );
				break;
			default:
				$this->input( $field );
		}
	}

	private function checkbox( $field ) {
		printf(
			'<label class="rwp-checkbox-label"><input %s id="%s" name="%s" type="checkbox"> %s</label>',
			$this->checked( $field ),
			$field['id'], $field['id'],
			isset( $field['description'] ) ? $field['description'] : ''
		);
	}

	private function input( $field ) {
		if ( isset( $field['color-picker'] ) ) {
			$field['class'] = 'rwp-color-picker';
		}
		printf(
			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function select( $field ) {
		printf(
			'<select id="%s" name="%s">%s</select>',
			$field['id'], $field['id'],
			$this->select_options( $field )
		);
	}

	private function select_selected( $field, $current ) {
		$value = $this->value( $field );
		if ( $value === $current ) {
			return 'selected';
		}
		return '';
	}

	private function select_options( $field ) {
		$output = [];
		$options = explode( "\r\n", $field['options'] );
		$i = 0;
		foreach ( $options as $option ) {
			$pair = explode( ':', $option );
			$pair = array_map( 'trim', $pair );
			$output[] = sprintf(
				'<option %s value="%s"> %s</option>',
				$this->select_selected( $field, $pair[0] ),
				$pair[0], $pair[1]
			);
			$i++;
		}
		return implode( '<br>', $output );
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}
		return str_replace( '\u0027', "'", $value );
	}

	private function checked( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
			if ( $value === 'on' ) {
				return 'checked';
			}
			return '';
		} else if ( isset( $field['checked'] ) ) {
			return 'checked';
		}
		return '';
	}
}
new wiz_snb_message;



























     
/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * Expiry Date = get_post_meta( get_the_ID(), 'wiz_snb_expiry-date', true )
 * Expiry time = get_post_meta( get_the_ID(), 'wiz_snb_expiry-time', true )
 * Time zone = get_post_meta( get_the_ID(), 'wiz_snb_time-zone', true )
 */
class wiz_snb_notify {
	private $config = '{"title":"Notification Bar End Date","description":"Schedule the notification bar expiry","prefix":"wiz_snb_","domain":"wiz_plugins","class_name":"wiz_snb_notify","context":"side","priority":"high","cpt":"notification_bar","fields":[{"type":"date","label":"Expiry Date","id":"wiz_snb_expiry-date"},{"type":"time","label":"Expiry time","id":"wiz_snb_expiry-time"},{"type":"select","label":"Time zone","options":"+12 : UTC-12\r\n+11.5 : UTC-11.30\r\n+11 : UTC-11\r\n+10.5 : UTC-10.30\r\n+10 : UTC-10\r\n+9.5 : UTC-9.30\r\n+9 : UTC-9\r\n+8.5 : UTC-8.30\r\n+8 : UTC-8\r\n+7.5 : UTC-7.30\r\n+7 : UTC-7\r\n+6.5 : UTC-6.30\r\n+6 : UTC-6\r\n+5.5 : UTC-5.30\r\n+5 : UTC-5\r\n+4.5 : UTC-4.30\r\n+4 : UTC-4\r\n+3.5 : UTC-3.30\r\n+3 : UTC-3\r\n+2.5 : UTC-2.30\r\n+2 : UTC-2\r\n+1.5 : UTC-1.30\r\n+1 : UTC-1\r\n+0.5 : UTC-0.30\r\n+0 : UTC+0\r\n-0.5 : UTC+0.30\r\n-1 : UTC+1\r\n-1.5 : UTC+1.30\r\n-2 : UTC+2\r\n-2.5 : UTC+2.30\r\n-3 : UTC+3\r\n-3.5 : UTC+3.30\r\n-4 : UTC+4\r\n-4.5 : UTC+4.30\r\n-5 : UTC+5\r\n-5.5 : UTC+5.30\r\n-5.75 : UTC+5.45\r\n-6 : UTC+6\r\n-6.5 : UTC+6.30\r\n-7 : UTC+7\r\n-7.5 : UTC+7.30\r\n-8 : UTC+8\r\n-8.5 : UTC+8.30\r\n-8.75 : UTC+8.45\r\n-9 : UTC+9\r\n-9.5 : UTC+9.30\r\n-10 : UTC+10\r\n-10.5 : UTC+10.30\r\n-11 : UTC+11\r\n-11.5 : UTC+11.30\r\n-12 : UTC+12\r\n-12.75 : UTC+12.45\r\n-13 : UTC+13\r\n-13.75 : UTC+13.45\r\n-14 : UTC+14","id":"wiz_snb_time-zone"}]}';

	public function __construct() {
		$this->config = json_decode( $this->config, true );
		$this->process_cpts();
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'admin_head', [ $this, 'admin_head' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function process_cpts() {
		if ( !empty( $this->config['cpt'] ) ) {
			if ( empty( $this->config['post-type'] ) ) {
				$this->config['post-type'] = [];
			}
			$parts = explode( ',', $this->config['cpt'] );
			$parts = array_map( 'trim', $parts );
			$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
		}
	}

	public function add_meta_boxes() {
		foreach ( $this->config['post-type'] as $screen ) {
			add_meta_box(
				sanitize_title( $this->config['title'] ),
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function admin_head() {
		global $typenow;
		if ( in_array( $typenow, $this->config['post-type'] ) ) {
			?><?php
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		echo '<div class="rwp-description">' . $this->config['description'] . '</div>';
		$this->fields_div();
	}

	private function fields_div() {
		foreach ( $this->config['fields'] as $field ) {
			?><div class="components-base-control">
				<div class="components-base-control__field"><?php
					$this->label( $field );
					$this->field( $field );
				?></div>
			</div><?php
		}
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			default:
				printf(
					'<label class="components-base-control__label" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			case 'date':
			case 'time':
				$this->input_minmax( $field );
				break;
			case 'select':
				$this->select( $field );
				break;
			default:
				$this->input( $field );
		}
	}

	private function input( $field ) {
		printf(
			'<input class="components-text-control__input %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function input_minmax( $field ) {
		printf(
			'<input class="components-text-control__input" id="%s" %s %s name="%s" %s type="%s" value="%s">',
			$field['id'],
			isset( $field['max'] ) ? "max='{$field['max']}'" : '',
			isset( $field['min'] ) ? "min='{$field['min']}'" : '',
			$field['id'],
			isset( $field['step'] ) ? "step='{$field['step']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function select( $field ) {
		printf(
			'<select id="%s" name="%s">%s</select>',
			$field['id'], $field['id'],
			$this->select_options( $field )
		);
	}

	private function select_selected( $field, $current ) {
		$value = $this->value( $field );
		if ( $value === $current ) {
			return 'selected';
		}
		return '';
	}

	private function select_options( $field ) {
		$output = [];
		$options = explode( "\r\n", $field['options'] );
		$i = 0;
		foreach ( $options as $option ) {
			$pair = explode( ':', $option );
			$pair = array_map( 'trim', $pair );
			$output[] = sprintf(
				'<option %s value="%s"> %s</option>',
				$this->select_selected( $field, $pair[0] ),
				$pair[0], $pair[1]
			);
			$i++;
		}
		return implode( '<br>', $output );
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}
		return str_replace( '\u0027', "'", $value );
	}

}
new wiz_snb_notify;

